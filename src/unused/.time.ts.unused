/*
TODO:
- add boundary checks everywhere (only positive numbers)
- tm diff - returns duration between dates, can request returning also sign
- tm compare - returns sign of comparison between two dates
- tm equals - returns whether two dates are strictly equal, or almost (specifying precision unit)
- tm trunc - returns truncated tm. Truncation is local or not, accepts unit: floor|ceil,
			 optional "rest" unit that handles all below smallest unit
- duration with - returns duration with replacements
- duration plus - adds two durations (or raw)
- duration minus - subtracts two durations (or raw)
- duration times - multiplies duration by positive float
- duration as - converts duration to requested unit, with rem: floor|ceil|round
*/

//#region type declarations
type UnitMode = "DT" | "D" | "T"
interface TM_Base {
	toString(): string
	toJSON(local?: "local"): string
	valueOf(): number
	__dateOf(): Date
}
interface TM_DateTime extends TM_Base {
	leap: Boolean & { get(local?: "local"): boolean }
	y: Number & { get(local?: "local"): number }
	q: Number & { get(local?: "local"): number }
	mo: Number & { get(local?: "local"): number }
	w: Number & { get(local?: "local"): number }
	dw: Number & { get(local?: "local"): number }
	d: Number & { get(local?: "local"): number }
	h: Number & { get(local?: "local"): number }
	min: Number & { get(local?: "local"): number }
	s: Number & { get(local?: "local"): number }
	ms: Number & { get(local?: "local"): number }

	with(replacements: DateTimeConfig): TM_DateTime
	with(local: "local", set: DateTimeConfig): TM_DateTime
	plus(delta: DateTimeConfig | TM_Duration): TM_DateTime
	plus(local: "local", delta: DateTimeConfig | TM_Duration): TM_DateTime
	minus(delta: DateTimeConfig | TM_Duration): TM_DateTime
	minus(local: "local", delta: DateTimeConfig | TM_Duration): TM_DateTime
	__diff(other: TM_DateTime): TM_Duration
	__diff(local: "local", other: TM_DateTime): TM_Duration
	__diff(signed: "signed", other: TM_DateTime): [diff: TM_Duration, sign: -1 | 0 | 1]
	__diff(localSigned: "local|signed" | "signed|local", other: TM_DateTime): [diff: TM_Duration, sign: -1 | 0 | 1]
	__compare(other: TM_DateTime): -1 | 0 | 1
	__compare(local: "local", other: TM_DateTime): -1 | 0 | 1
	__equals(other: TM_DateTime): -1 | 0 | 1
	__equals(local: "local", other: TM_DateTime): -1 | 0 | 1
	__trunc(how: TruncationConfig): TM_DateTime
}
interface TM_SimpleDate extends TM_Base {
	leap: boolean
	y: number
	q: number
	mo: number
	w: number
	dw: number
	d: number

	with(replacements: Pick<DateTimeConfig, "y" | "mo" | "d">): TM_SimpleDate
	plus(delta: Pick<DateTimeConfig, "y" | "mo" | "d"> | TM_Duration): TM_SimpleDate
	minus(delta: Pick<DateTimeConfig, "y" | "mo" | "d"> | TM_Duration): TM_SimpleDate
	__diff(other: TM_SimpleDate): TM_Duration
	__diff(signed: "signed", other: TM_SimpleDate): [diff: TM_Duration, sign: -1 | 0 | 1]
	__compare(other: TM_SimpleDate): -1 | 0 | 1
	__equals(other: TM_SimpleDate): -1 | 0 | 1
	__trunc(how: TruncationConfig): TM_SimpleDate
}
interface TM_SimpleTime extends TM_Base {
	h: number
	min: number
	s: number
	ms: number

	with(replacements: Pick<DateTimeConfig, "h" | "min" | "s" | "ms">): TM_SimpleTime
	plus(delta: Pick<DateTimeConfig, "h" | "min" | "s" | "ms"> | TM_Duration): TM_SimpleTime
	minus(delta: Pick<DateTimeConfig, "h" | "min" | "s" | "ms"> | TM_Duration): TM_SimpleTime
	__diff(other: TM_DateTime): TM_Duration
	__diff(signed: "signed", other: TM_DateTime): [diff: TM_Duration, sign: -1 | 0 | 1]
	__compare(other: TM_DateTime): -1 | 0 | 1
	__equals(other: TM_DateTime): -1 | 0 | 1
	__trunc(how: TruncationConfig): TM_DateTime
}
interface private__TM_Base extends TM_Base {
	_ref: Date
	_mode: UnitMode
}
interface TM_Constructor {
	(from: Date | string | number | NewDateTimeConfig, mode: "T"): TM_SimpleTime
	new(from: Date | string | number | NewDateTimeConfig, mode: "T"): TM_SimpleTime

	(from: Date | string | number | NewDateTimeConfig, mode: "D"): TM_SimpleDate
	new(from: Date | string | number | NewDateTimeConfig, mode: "D"): TM_SimpleDate

	(from: Date | string | number | NewDateTimeConfig, mode?: "DT"): TM_DateTime
	new(from: Date | string | number | NewDateTimeConfig, mode?: "DT"): TM_DateTime
	(local: "local", from: NewDateTimeConfig): TM_DateTime
	new(local: "local", from: NewDateTimeConfig): TM_DateTime

	(mode?: UnitMode): TM_DateTime
	new(mode?: UnitMode): TM_DateTime

	convert(config: DurationUnitConversion): number
	duration: TM_DurationConstructor
}

interface TM_Duration {
	d: number
	h: number
	min: number
	s: number
	ms: number

	toString(): string
	toJSON(): string
	valueOf(): number

	__with(replacements: Pick<DateTimeConfig, "d" | "h" | "min" | "s" | "ms">): TM_Duration
	__plus(delta: Pick<DateTimeConfig, "d" | "h" | "min" | "s" | "ms"> | TM_Duration): TM_SimpleTime
	__minus(delta: Pick<DateTimeConfig, "d" | "h" | "min" | "s" | "ms"> | TM_Duration): TM_SimpleTime
	__times(by: number): TM_Duration
	__as(what: DurationConversion): number
}
interface private__TM_Duration extends TM_Duration {
	_raw: number
	_d: number
	_h: number
	_min: number
	_s: number
	_ms: number
}
interface TM_DurationConstructor {
	(of: DurationConfig | number): TM_Duration
	new(of: DurationConfig | number): TM_Duration
}

type NewDateTimeConfig = { y: number }
	| { y: number, mo: number }
	| { y: number, mo: number, d: number }
	| { y: number, mo: number, d: number, h: number }
	| { y: number, mo: number, d: number, h: number, min: number }
	| { y: number, mo: number, d: number, h: number, min: number, s: number }
	| { y: number, mo: number, d: number, h: number, min: number, s: number, ms: number }

type DateTimeUnit = "y" | "mo" | "d" | "h" | "min" | "s" | "ms"
type DateTimeConfig = Partial<Record<DateTimeUnit, number>>

type DurationUnit = Exclude<DateTimeUnit, "y" | "mo">
type DurationConfig = Partial<Record<DurationUnit, number>>

type TruncationConfig = Partial<Record<Exclude<DateTimeUnit, "y"> | "rest", "floor" | "ceil">>

type DurationConversionStrategy = "floor" | "ceil" | "round" | "decimal"
type DurationConversion = { d: DurationConversionStrategy }
	| { h: DurationConversionStrategy }
	| { min: DurationConversionStrategy }
	| { s: DurationConversionStrategy }
	| { ms: DurationConversionStrategy }
//#endregion type declarations

///---///---///---///---///---///---///---///---///---///---///---///---///---///

//#region tm constructor
const tm: TM_Constructor = function <Mode extends UnitMode = "DT">(
	this: private__TM_Base | void,
	_fromOrLocal: Date | string | number | NewDateTimeConfig | undefined,
	_modeOrFrom: Mode | NewDateTimeConfig | undefined,
) {
	if (!(this instanceof tm)) {
		return new tm(_fromOrLocal as any, _modeOrFrom as any)
	}

	const self = this as private__TM_Base

	const [local, from, mode] = _fromOrLocal === "local"
		? [_fromOrLocal, _modeOrFrom, void 0] as ["local", DateTimeConfig, void]
		: (_fromOrLocal === undefined) && _modeOrFrom === undefined
/*	 */ ? [void 0, new Date(), void 0]
/*	 */ : _fromOrLocal === "DT" || _fromOrLocal === "D" || _fromOrLocal === "T"
/*	 */ ? [void 0, new Date(), _fromOrLocal] as [void, Date, Mode]
/*	 */ : [void 0, _fromOrLocal, _modeOrFrom] as [void, Date | string | number | DateTimeConfig, Mode | undefined]

	if (local) {
		const { y, mo, d, h, min, s, ms } = from
		self._ref = new Date(y!, mo !== undefined ? mo + 1 : 0, d, h, min, s, ms)
		self._mode = "DT" as Mode
		return
	}
	if (typeof from === "string" || typeof from === "number" || from instanceof Date) {
		self._ref = new Date(from)
		self._mode = (mode ?? "DT") as Mode
		return
	}
	const { y, mo, d, h, min, s, ms } = from
	self._ref = new Date(Date.UTC(y!, mo !== undefined ? mo + 1 : 0, d, h, min, s, ms))
	self._mode = (mode ?? "DT") as Mode
} as any
//#endregion tm constructor

//#region duration constructor
const conversionTable = {
	d: 24 * 60 * 60 * 1000,
	h: 60 * 60 * 1000,
	min: 60 * 1000,
	s: 1000,
	ms: 1
}
tm.duration = function (
	this: private__TM_Duration | void,
	_of: DurationConfig | number,
) {
	if (!(this instanceof tm.duration)) {
		return new tm.duration(_of)
	}

	const self = this as private__TM_Duration

	if (typeof _of === "number") {
		self._raw = _of
	} else {
		self._raw =
			(_of.d ?? 0) * conversionTable.d
			+ (_of.h ?? 0) * conversionTable.h
			+ (_of.min ?? 0) * conversionTable.min
			+ (_of.s ?? 0) * conversionTable.s
			+ (_of.ms ?? 0) * conversionTable.ms
	}
	var [d, rem] = div(self._raw, conversionTable.d)
	var [h, rem] = div(rem, conversionTable.h)
	var [min, rem] = div(rem, conversionTable.min)
	var [s, ms] = div(rem, conversionTable.s)

	self._d = d
	self._h = h
	self._min = min
	self._s = s
	self._ms = Math.floor(ms)
} as any
//#endregion duration constructor

//#region unit conversion
type DurationUnitConversionOut<T> = { to: Exclude<DurationUnit, T>, rem?: "round" | "floor" | "ceil" }
type DurationUnitConversion =
	{ d: number } & DurationUnitConversionOut<"d">
	| { h: number } & DurationUnitConversionOut<"h">
	| { min: number } & DurationUnitConversionOut<"min">
	| { s: number } & DurationUnitConversionOut<"s">
	| { ms: number } & DurationUnitConversionOut<"ms">


tm.convert = function (config: DurationUnitConversion) {
	const { to, rem } = config
	const toUnit = conversionTable[to]
	if ("d" in config) {
		var fromUnit = conversionTable.d
		var val = config.d
	}
	else if ("h" in config) {
		var fromUnit = conversionTable.h
		var val = config.h
	}
	else if ("min" in config) {
		var fromUnit = conversionTable.min
		var val = config.min
	}
	else if ("s" in config) {
		var fromUnit = conversionTable.s
		var val = config.s
	}
	else if ("ms" in config) {
		var fromUnit = conversionTable.ms
		var val = config.ms
	} else throw Error("Unknown configuration type")
	val = val * fromUnit / toUnit
	if (rem) {
		val = Math[rem](val)
	}
	return val
}
//#endregion unit conversion

//#region tm/duration toString
tm.prototype.toString = function (this: private__TM_Base) {
	switch (this._mode) {
		case "T": {
			const time = this._ref.toJSON()
				.split("T")
				.at(1)!
				.split(".")
				.at(0)
			return `${time}`
		}
		case "D": {
			const date = this._ref.toString()
				.replace(/\d{2}:\d{2}:\d{2}/, "~")
				.split("~")
				.at(0)
			return `${date}`
		}
		case "DT": {
			return this._ref.toString()
		}
	}
}

tm.duration.prototype.toString = function (this: private__TM_Duration) {
	let res = `${this._ms} millisecond`
	if (this._d === 0 && this._h === 0 && this._min === 0 && this._s === 0) {
		return res
	}

	res = `${this._s} seconds ${res}`
	if (this._d === 0 && this._h === 0 && this._min === 0) {
		return res
	}

	res = `${this._min} minutes ${res}`
	if (this._d === 0 && this._h === 0) {
		return res
	}

	res = `${this._h} hours ${res}`
	if (this._d === 0) {
		return res
	}

	res = `${this._h} days ${res}`
	return res
}
//#endregion tm/duration toString

//#region tm/duration toJSON
tm.prototype.toJSON = function (
	this: private__TM_Base,
	_local?: "local"
) {
	switch (this._mode) {
		case "T": {
			const time = this._ref.toJSON()
				.split("T")
				.at(1)!
				.slice(0, -1)
			return `${time}`
		}
		case "D": {
			const date = this._ref.toJSON()
				.split("T")
				.at(0)
			return `${date}`
		}
		case "DT": {
			if (_local) {
				const offset = -this._ref.getTimezoneOffset()
				let tz = offset >= 0 ? "+" : "-"
				const [tz_h, tz_min] = div(Math.abs(offset), 60)
				tz += tz_h.toString()
					.padStart(2, "0")
				tz += ":"
				tz += tz_min.toString()
					.padStart(2, "0")
				const pad = (what: number, n: number) => what.toString().padStart(n, "0")
				const y = pad(this._ref.getFullYear(), 4)
				const mo = pad(this._ref.getMonth(), 2)
				const d = pad(this._ref.getDate(), 2)
				const h = pad(this._ref.getHours(), 2)
				const min = pad(this._ref.getMinutes(), 2)
				const s = pad(this._ref.getSeconds(), 2)
				const ms = pad(this._ref.getMilliseconds(), 3)
				return `${y}-${mo}-${d}T${h}:${min}:${s}.${ms}${tz}`
			} else {
				const dt = this._ref.toJSON()
				return `${dt}`
			}
		}
	}
}

tm.duration.prototype.toJSON = function (this: private__TM_Duration) {
	const d = this._d
	const h = this._h
	const min = this._min
	const s = this._s
	const ms = this._ms
	return `P${d}DT${h}H${min}M${s}.${ms}S`
}
//#endregion tm/duration toJSON

//#region tm/duration valueOf
tm.prototype.valueOf = function (this: private__TM_Base) {
	return this._ref.valueOf()
}

tm.duration.prototype.valueOf = function (this: private__TM_Duration) {
	return this._raw
}
//#endregion tm/duration valueOf

//#region tm/duration inspection
let util
try {
	util = await import("util")
} catch { }

util && Object.defineProperty(tm.prototype, util.inspect.custom, {
	value: function (this: private__TM_Base) {
		switch (this._mode) {
			case "T": {
				const time = this._ref.toJSON()
					.split("T")
					.at(1)!
					.slice(0, -1)
				return `TM_SimpleTime { from: ${time} }`
			}
			case "D": {
				const date = this._ref.toJSON()
					.split("T")
					.at(0)
				return `TM_SimpleDate { from: ${date} }`
			}
			case "DT": {
				const dt = this._ref.toJSON()
				const offset = -this._ref.getTimezoneOffset()
				let tz = offset >= 0 ? "+" : "-"
				const [tz_h, tz_min] = div(Math.abs(offset), 60)
				tz += tz_h.toString()
					.padStart(2, "0")
				tz += ":"
				tz += tz_min.toString()
					.padStart(2, "0")
				return `TM_DateTime { from: ${dt}, TZ: ${tz} }`
			}
		}
	},
	enumerable: false,
})
util && Object.defineProperty(tm.duration.prototype, util.inspect.custom, {
	value: function (this: private__TM_Duration) {
		return `TM_Duration { of: ${this.toJSON()}, raw: ${this._raw} }`
	},
	enumerable: false,
})
//#endregion tm/duration inspection

//#region tm/duration tagging
Object.defineProperty(tm.prototype, Symbol.toStringTag, {
	value: function (this: private__TM_Base) {
		switch (this._mode) {
			case "T": {
				return `TM_SimpleTime`
			}
			case "D": {
				return `TM_SimpleDate`
			}
			case "DT": {
				return `TM_DateTime`
			}
		}
	},
	enumerable: false,
})
Object.defineProperty(tm.duration.prototype, Symbol.toStringTag, {
	value: function (this: private__TM_Duration) {
		return `TM_Duration`
	},
	enumerable: false,
})
//#endregion tm/duration tagging

//#region tm properties
class NumGet extends Number {
	get(_local?: "local"): number { throw Error("Not assigned") }

	constructor(value: number, getter: (local?: "local") => number) {
		super(value)
		this.get = getter
	}
}

class BoolGet extends Boolean {
	get(_local?: "local"): boolean { throw Error("Not assigned") }

	constructor(value: boolean, getter: (local?: "local") => boolean) {
		super(value)
		this.get = getter
	}
}

const months = [
	[31, 31],
	[28, 29],
	[31, 31],
	[30, 30],
	[31, 31],
	[30, 30],
	[31, 31],
	[31, 31],
	[30, 30],
	[31, 31],
	[30, 30],
	[31, 31],
]
function doy(day: number, month: number, isLeap: number) {
	let doy = day
	for (let i = 0; i < month - 1; i++) doy += months[i][isLeap]
	return doy
}

function leapCalc(date: Date, utc: "" | "UTC") {
	const year = date[`get${utc}FullYear`]()
	return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)
}

function weekCalc(date: Date, utc: "" | "UTC") {
	date = new Date(date)
	date.setHours(0, 0, 0, 0)

	const thursday = new Date(date)
	thursday[`set${utc}Date`](date[`get${utc}Date`]() + (4 - (date[`get${utc}Day`]() || 7)))

	const yearStart = new Date(thursday[`get${utc}FullYear`](), 0, 1)
	const isLeap = leapCalc(yearStart, utc)

	const thursdayDOY = doy(thursday[`get${utc}Date`](), thursday[`get${utc}Month`]() + 1, +isLeap)
	const yearStartDOY = doy(yearStart[`get${utc}Date`](), yearStart[`get${utc}Month`]() + 1, +isLeap)

	return Math.ceil((thursdayDOY - yearStartDOY + 1) / 7)
}

Object.defineProperties(tm.duration.prototype, {
	leap: {
		get: function (this: private__TM_Base) {
			return new BoolGet(leapCalc(this._ref, "UTC"), (local) => local === "local"
				? leapCalc(this._ref, "")
				: leapCalc(this._ref, "UTC")
			)
		}
	},
	y: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCFullYear(), (local) => local === "local"
				? this._ref.getFullYear()
				: this._ref.getUTCFullYear()
			)
		}
	},
	q: {
		get: function (this: private__TM_Base) {
			return new NumGet(Math.floor(this._ref.getUTCMonth() / 4) + 1, (local) => local === "local"
				? Math.floor(this._ref.getMonth() / 4) + 1
				: Math.floor(this._ref.getUTCMonth() / 4) + 1
			)
		}
	},
	mo: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCMonth(), (local) => local === "local"
				? this._ref.getMonth()
				: this._ref.getUTCMonth()
			)
		}
	},
	w: {
		get: function (this: private__TM_Base) {
			return new NumGet(weekCalc(this._ref, "UTC"), (local) => local === "local"
				? weekCalc(this._ref, "")
				: weekCalc(this._ref, "UTC")
			)
		}
	},
	dw: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCDay() || 7, (local) => local === "local"
				? this._ref.getDay() || 7
				: this._ref.getUTCDay() || 7
			)
		}
	},
	d: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCDate(), (local) => local === "local"
				? this._ref.getDate()
				: this._ref.getUTCDate()
			)
		}
	},
	h: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCHours(), (local) => local === "local"
				? this._ref.getHours()
				: this._ref.getUTCHours()
			)
		}
	},
	min: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCMinutes(), (local) => local === "local"
				? this._ref.getMinutes()
				: this._ref.getUTCMinutes()
			)
		}
	},
	s: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCSeconds(), (local) => local === "local"
				? this._ref.getSeconds()
				: this._ref.getUTCSeconds()
			)
		}
	},
	ms: {
		get: function (this: private__TM_Base) {
			return new NumGet(this._ref.getUTCMilliseconds(), (local) => local === "local"
				? this._ref.getMilliseconds()
				: this._ref.getUTCMilliseconds()
			)
		}
	},
	raw: {
		get: function (this: private__TM_Base) {
			return this._ref
		}
	}
})
//#endregion tm properties

//#region duration properties
Object.defineProperties(tm.duration.prototype, {
	d: { get: function (this: private__TM_Duration) { return this._d } },
	h: { get: function (this: private__TM_Duration) { return this._h } },
	min: { get: function (this: private__TM_Duration) { return this._min } },
	s: { get: function (this: private__TM_Duration) { return this._s } },
	ms: { get: function (this: private__TM_Duration) { return this._ms } },
})
//#endregion duration properties

//#region tm with
tm.prototype.with = function (
	this: private__TM_Base,
	_localOrReplacements: "local" | DateTimeConfig,
	_maybeReplacements?: DateTimeConfig,
) {
	const [local, repl] = _localOrReplacements === "local"
		? [_localOrReplacements, _maybeReplacements] as ["local", DateTimeConfig]
		: [void 0, _localOrReplacements] as [void, DateTimeConfig]

	const base = new Date(this._ref)
	const set = local ? "set" : "setUTC"

	if (repl.y !== undefined) { base[`${set}FullYear`](repl.y) }
	if (repl.mo !== undefined) { base[`${set}Month`](repl.mo - 1) }
	if (repl.d !== undefined) { base[`${set}Date`](repl.d - 1) }
	if (repl.h !== undefined) { base[`${set}Hours`](repl.h) }
	if (repl.min !== undefined) { base[`${set}Minutes`](repl.min) }
	if (repl.s !== undefined) { base[`${set}Seconds`](repl.s) }
	if (repl.ms !== undefined) { base[`${set}Milliseconds`](repl.ms) }

	if (this._mode === "D") { base.setUTCHours(0, 0, 0, 0) }
	if (this._mode === "T") { base.setUTCFullYear(1970, 0, 1) }

	return tm(base, this._mode as any)
}
//#endregion tm with

//#region tm plus
tm.prototype.plus = function (
	this: private__TM_Base,
	_localOrDelta: "local" | DateTimeConfig | TM_Duration,
	_maybeDelta?: DateTimeConfig | TM_Duration,
) {
	const [local, delta] = _localOrDelta === "local"
		? [_localOrDelta, _maybeDelta] as ["local", DateTimeConfig]
		: [void 0, _localOrDelta] as [void, DateTimeConfig]

	const base = new Date(this._ref)
	const set = local ? "set" : "setUTC"
	const get = local ? "get" : "getUTC"

	if (delta.y !== undefined) { base[`${set}FullYear`](base[`${get}FullYear`]() + delta.y) }
	if (delta.mo !== undefined) { base[`${set}Month`](base[`${get}Month`]() + delta.mo) }
	if (delta.d !== undefined) { base[`${set}Date`](base[`${get}Date`]() + delta.d) }
	if (delta.h !== undefined) { base[`${set}Hours`](base[`${get}Hours`]() + delta.h) }
	if (delta.min !== undefined) { base[`${set}Minutes`](base[`${get}Minutes`]() + delta.min) }
	if (delta.s !== undefined) { base[`${set}Seconds`](base[`${get}Seconds`]() + delta.s) }
	if (delta.ms !== undefined) { base[`${set}Milliseconds`](base[`${get}Milliseconds`]() + delta.ms) }

	if (this._mode === "D") { base.setUTCHours(0, 0, 0, 0) }
	if (this._mode === "T") { base.setUTCFullYear(1970, 0, 1) }

	return tm(base, this._mode as any)
}
//#endregion tm plus

//#region tm minus
tm.prototype.minus = function (
	this: private__TM_Base,
	_localOrDelta: "local" | DateTimeConfig | TM_Duration,
	_maybeDelta?: DateTimeConfig | TM_Duration,
) {
	const [local, delta] = _localOrDelta === "local"
		? [_localOrDelta, _maybeDelta] as ["local", DateTimeConfig]
		: [void 0, _localOrDelta] as [void, DateTimeConfig]

	const base = new Date(this._ref)
	const set = local ? "set" : "setUTC"
	const get = local ? "get" : "getUTC"

	if (delta.y !== undefined) { base[`${set}FullYear`](base[`${get}FullYear`]() - delta.y) }
	if (delta.mo !== undefined) { base[`${set}Month`](base[`${get}Month`]() - delta.mo) }
	if (delta.d !== undefined) { base[`${set}Date`](base[`${get}Date`]() - delta.d) }
	if (delta.h !== undefined) { base[`${set}Hours`](base[`${get}Hours`]() - delta.h) }
	if (delta.min !== undefined) { base[`${set}Minutes`](base[`${get}Minutes`]() - delta.min) }
	if (delta.s !== undefined) { base[`${set}Seconds`](base[`${get}Seconds`]() - delta.s) }
	if (delta.ms !== undefined) { base[`${set}Milliseconds`](base[`${get}Milliseconds`]() - delta.ms) }

	if (this._mode === "D") { base.setUTCHours(0, 0, 0, 0) }
	if (this._mode === "T") { base.setUTCFullYear(1970, 0, 1) }

	return tm(base, this._mode as any)
}
//#endregion tm minus

//#region tm diff
//#endregion tm diff

//#region tm compare
//#endregion tm compare

//#region tm equals
//#endregion tm equals

//#region tm trunc
//#endregion tm trunc

//#region duration with
//#endregion duration with

//#region duration plus
//#endregion duration plus

//#region duration minus
//#endregion duration minus

//#region duration times
//#endregion duration times

//#region duration as
//#endregion duration as

export default tm

function div(a: number, b: number) {
	return [Math.floor(a / b), a % b] as const
}
